/*
 * This file is generated by jOOQ.
 */
package games.classifier.manager.infrastructure.adapters.db.tables;


import games.classifier.manager.infrastructure.adapters.db.Indexes;
import games.classifier.manager.infrastructure.adapters.db.Keys;
import games.classifier.manager.infrastructure.adapters.db.Public;
import games.classifier.manager.infrastructure.adapters.db.tables.records.GameRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Game extends TableImpl<GameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.game</code>
     */
    public static final Game GAME = new Game();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameRecord> getRecordType() {
        return GameRecord.class;
    }

    /**
     * The column <code>public.game.id</code>.
     */
    public final TableField<GameRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.game.game_id</code>.
     */
    public final TableField<GameRecord, Short> GAME_ID = createField(DSL.name("game_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.game.name</code>.
     */
    public final TableField<GameRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.game.legal_name</code>.
     */
    public final TableField<GameRecord, String> LEGAL_NAME = createField(DSL.name("legal_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.game.price_default</code>.
     */
    public final TableField<GameRecord, Long> PRICE_DEFAULT = createField(DSL.name("price_default"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.game.count_mls</code>.
     */
    public final TableField<GameRecord, Integer> COUNT_MLS = createField(DSL.name("count_mls"), SQLDataType.INTEGER, this, "");

    private Game(Name alias, Table<GameRecord> aliased) {
        this(alias, aliased, null);
    }

    private Game(Name alias, Table<GameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.game</code> table reference
     */
    public Game(String alias) {
        this(DSL.name(alias), GAME);
    }

    /**
     * Create an aliased <code>public.game</code> table reference
     */
    public Game(Name alias) {
        this(alias, GAME);
    }

    /**
     * Create a <code>public.game</code> table reference
     */
    public Game() {
        this(DSL.name("game"), null);
    }

    public <O extends Record> Game(Table<O> child, ForeignKey<O, GameRecord> key) {
        super(child, key, GAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAMEUK);
    }

    @Override
    public Identity<GameRecord, Long> getIdentity() {
        return (Identity<GameRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameRecord> getPrimaryKey() {
        return Keys.GAME_PKEY;
    }

    @Override
    public Game as(String alias) {
        return new Game(DSL.name(alias), this);
    }

    @Override
    public Game as(Name alias) {
        return new Game(alias, this);
    }

    @Override
    public Game as(Table<?> alias) {
        return new Game(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(String name) {
        return new Game(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(Name name) {
        return new Game(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(Table<?> name) {
        return new Game(name.getQualifiedName(), null);
    }
}

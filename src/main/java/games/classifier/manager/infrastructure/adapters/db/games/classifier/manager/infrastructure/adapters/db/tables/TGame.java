/*
 * This file is generated by jOOQ.
 */
package games.classifier.manager.infrastructure.adapters.db.tables;


import games.classifier.manager.infrastructure.adapters.db.Indexes;
import games.classifier.manager.infrastructure.adapters.db.Keys;
import games.classifier.manager.infrastructure.adapters.db.Public;
import games.classifier.manager.infrastructure.adapters.db.tables.records.TGameRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TGame extends TableImpl<TGameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.t_game</code>
     */
    public static final TGame T_GAME = new TGame();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TGameRecord> getRecordType() {
        return TGameRecord.class;
    }

    /**
     * The column <code>public.t_game.id</code>. PK
     */
    public final TableField<TGameRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "PK");

    /**
     * The column <code>public.t_game.game_id</code>. Идентификатор игры
     */
    public final TableField<TGameRecord, Integer> GAME_ID = createField(DSL.name("game_id"), SQLDataType.INTEGER.nullable(false), this, "Идентификатор игры");

    /**
     * The column <code>public.t_game.name</code>. Наименование игры
     */
    public final TableField<TGameRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "Наименование игры");

    /**
     * The column <code>public.t_game.price_default</code>. Стоимость МЛС по
     * умолчанию
     */
    public final TableField<TGameRecord, Long> PRICE_DEFAULT = createField(DSL.name("price_default"), SQLDataType.BIGINT.nullable(false), this, "Стоимость МЛС по умолчанию");

    /**
     * The column <code>public.t_game.updated_at</code>. Время последнего
     * изменения свойств игры
     */
    public final TableField<TGameRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Время последнего изменения свойств игры");

    /**
     * The column <code>public.t_game.deleted</code>. Блокировка игры
     */
    public final TableField<TGameRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "Блокировка игры");

    private TGame(Name alias, Table<TGameRecord> aliased) {
        this(alias, aliased, null);
    }

    private TGame(Name alias, Table<TGameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.t_game</code> table reference
     */
    public TGame(String alias) {
        this(DSL.name(alias), T_GAME);
    }

    /**
     * Create an aliased <code>public.t_game</code> table reference
     */
    public TGame(Name alias) {
        this(alias, T_GAME);
    }

    /**
     * Create a <code>public.t_game</code> table reference
     */
    public TGame() {
        this(DSL.name("t_game"), null);
    }

    public <O extends Record> TGame(Table<O> child, ForeignKey<O, TGameRecord> key) {
        super(child, key, T_GAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.UKGAMEID);
    }

    @Override
    public Identity<TGameRecord, Integer> getIdentity() {
        return (Identity<TGameRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TGameRecord> getPrimaryKey() {
        return Keys.T_GAME_PKEY;
    }

    @Override
    public TGame as(String alias) {
        return new TGame(DSL.name(alias), this);
    }

    @Override
    public TGame as(Name alias) {
        return new TGame(alias, this);
    }

    @Override
    public TGame as(Table<?> alias) {
        return new TGame(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TGame rename(String name) {
        return new TGame(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TGame rename(Name name) {
        return new TGame(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TGame rename(Table<?> name) {
        return new TGame(name.getQualifiedName(), null);
    }
}

/*
 * This file is generated by jOOQ.
 */
package games.classifier.manager.infrastructure.adapters.db.tables.records;


import games.classifier.manager.infrastructure.adapters.db.tables.Games;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GamesRecord extends UpdatableRecordImpl<GamesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.games.id</code>.
     */
    public GamesRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.games.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.games.game_code</code>.
     */
    public GamesRecord setGameCode(Short value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.games.game_code</code>.
     */
    public Short getGameCode() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>public.games.name</code>.
     */
    public GamesRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.games.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GamesRecord
     */
    public GamesRecord() {
        super(Games.GAMES);
    }

    /**
     * Create a detached, initialised GamesRecord
     */
    public GamesRecord(Long id, Short gameCode, String name) {
        super(Games.GAMES);

        setId(id);
        setGameCode(gameCode);
        setName(name);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GamesRecord
     */
    public GamesRecord(games.classifier.manager.infrastructure.adapters.db.tables.pojos.Games value) {
        super(Games.GAMES);

        if (value != null) {
            setId(value.getId());
            setGameCode(value.getGameCode());
            setName(value.getName());
            resetChangedOnNotNull();
        }
    }
}

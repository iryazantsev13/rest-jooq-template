/*
 * This file is generated by jOOQ.
 */
package games.classifier.manager.infrastructure.adapters.db.tables.records;


import games.classifier.manager.infrastructure.adapters.db.tables.TGame;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TGameRecord extends UpdatableRecordImpl<TGameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.t_game.id</code>. PK
     */
    public TGameRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.t_game.id</code>. PK
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.t_game.game_id</code>. Идентификатор игры
     */
    public TGameRecord setGameId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.t_game.game_id</code>. Идентификатор игры
     */
    public Integer getGameId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.t_game.name</code>. Наименование игры
     */
    public TGameRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.t_game.name</code>. Наименование игры
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.t_game.price_default</code>. Стоимость МЛС по
     * умолчанию
     */
    public TGameRecord setPriceDefault(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.t_game.price_default</code>. Стоимость МЛС по
     * умолчанию
     */
    public Long getPriceDefault() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.t_game.updated_at</code>. Время последнего
     * изменения свойств игры
     */
    public TGameRecord setUpdatedAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.t_game.updated_at</code>. Время последнего
     * изменения свойств игры
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.t_game.deleted</code>. Блокировка игры
     */
    public TGameRecord setDeleted(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.t_game.deleted</code>. Блокировка игры
     */
    public Boolean getDeleted() {
        return (Boolean) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TGameRecord
     */
    public TGameRecord() {
        super(TGame.T_GAME);
    }

    /**
     * Create a detached, initialised TGameRecord
     */
    public TGameRecord(Integer id, Integer gameId, String name, Long priceDefault, LocalDateTime updatedAt, Boolean deleted) {
        super(TGame.T_GAME);

        setId(id);
        setGameId(gameId);
        setName(name);
        setPriceDefault(priceDefault);
        setUpdatedAt(updatedAt);
        setDeleted(deleted);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TGameRecord
     */
    public TGameRecord(games.classifier.manager.infrastructure.adapters.db.tables.pojos.TGame value) {
        super(TGame.T_GAME);

        if (value != null) {
            setId(value.getId());
            setGameId(value.getGameId());
            setName(value.getName());
            setPriceDefault(value.getPriceDefault());
            setUpdatedAt(value.getUpdatedAt());
            setDeleted(value.getDeleted());
            resetChangedOnNotNull();
        }
    }
}

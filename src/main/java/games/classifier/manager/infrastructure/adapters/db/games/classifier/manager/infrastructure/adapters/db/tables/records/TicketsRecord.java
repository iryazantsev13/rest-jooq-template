/*
 * This file is generated by jOOQ.
 */
package games.classifier.manager.infrastructure.adapters.db.tables.records;


import games.classifier.manager.infrastructure.adapters.db.tables.Tickets;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TicketsRecord extends UpdatableRecordImpl<TicketsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.tickets.id</code>.
     */
    public TicketsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.tickets.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.tickets.game_id</code>.
     */
    public TicketsRecord setGameId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.tickets.game_id</code>.
     */
    public Long getGameId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.tickets.barcode</code>.
     */
    public TicketsRecord setBarcode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.tickets.barcode</code>.
     */
    public String getBarcode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.tickets.status</code>.
     */
    public TicketsRecord setStatus(Short value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.tickets.status</code>.
     */
    public Short getStatus() {
        return (Short) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TicketsRecord
     */
    public TicketsRecord() {
        super(Tickets.TICKETS);
    }

    /**
     * Create a detached, initialised TicketsRecord
     */
    public TicketsRecord(Long id, Long gameId, String barcode, Short status) {
        super(Tickets.TICKETS);

        setId(id);
        setGameId(gameId);
        setBarcode(barcode);
        setStatus(status);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TicketsRecord
     */
    public TicketsRecord(games.classifier.manager.infrastructure.adapters.db.tables.pojos.Tickets value) {
        super(Tickets.TICKETS);

        if (value != null) {
            setId(value.getId());
            setGameId(value.getGameId());
            setBarcode(value.getBarcode());
            setStatus(value.getStatus());
            resetChangedOnNotNull();
        }
    }
}
